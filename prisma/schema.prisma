generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_URL")
    directUrl = env("POSTGRES_DIRECT_URL")
}

// ПОЛЬЗОВАТЕЛИ И ИХ СТАТИСТИКА
model User {
    id String @id @default(cuid())

    email    String @unique
    username String @unique

    avatar String?
    stats  UserStats?

    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model UserStats {
    userId String @id @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    records          TestRecord[]
    lastTests        Test[]
    typingTimePerDay TypingTimePerDay[]

    totalTypingTimeMillis  BigInt
    totalStartedTests      Int
    totalCompletedTests    Int
    totalFullyCorrectTests Int
    totalTypedWords        BigInt
    totalCorrectWords      BigInt
    totalTypedChars        BigInt
    totalCorrectChars      BigInt
    totalXP                Int

    avgWPM             Json
    last100TestsAvgWPM Json

    /**
     * avgWPM_15s  Float
     * avgWPM_30s  Float
     * avgWPM_60s  Float
     * avgWPM_120s Float
     * avgWPM_360s Float
     * avgWPM_10words  Float
     * avgWPM_25words  Float
     * avgWPM_50words  Float
     * avgWPM_100words Float
     * avgWPM_250words Float
     * avgWPM_500words Float
     * avgWPM_smText  Float
     * avgWPM_mdText  Float
     * avgWPM_lgText  Float
     * avgWPM_xlText  Float
     * avgWPM_xxlText Float
     * avgWPM_1sentenceAI  Float
     * avgWPM_2sentenceAI  Float
     * avgWPM_5sentenceAI  Float
     * avgWPM_10sentenceAI Float
     * avgWPM_25sentenceAI Float
     * last100AvgWPM_15s  Float
     * last100AvgWPM_30s  Float
     * last100AvgWPM_60s  Float
     * last100AvgWPM_120s Float
     * last100AvgWPM_360s Float
     * last100AvgWPM_10words  Float
     * last100AvgWPM_25words  Float
     * last100AvgWPM_50words  Float
     * last100AvgWPM_100words Float
     * last100AvgWPM_250words Float
     * last100AvgWPM_500words Float
     * last100AvgWPM_smText  Float
     * last100AvgWPM_mdText  Float
     * last100AvgWPM_lgText  Float
     * last100AvgWPM_xlText  Float
     * last100AvgWPM_xxlText Float
     * last100AvgWPM_1sentenceAI  Float
     * last100AvgWPM_2sentenceAI  Float
     * last100AvgWPM_5sentenceAI  Float
     * last100AvgWPM_10sentenceAI Float
     * last100AvgWPM_25sentenceAI Float
     */
}

model TestRecord {
    id String @id @default(cuid())

    userStatsId String
    userStats   UserStats @relation(fields: [userStatsId], references: [userId], onDelete: Cascade)

    testType      TestType
    testValueType TestValueType
    testValue     Int

    typedText     String
    needText      String
    startTestTime BigInt
    endTestTime   BigInt

    wpm    Float
    date   DateTime @default(now())
    Test   Test?    @relation(fields: [testId], references: [id], onDelete: Cascade)
    testId String?

    @@unique([userStatsId, wpm])
}

model Test {
    id String @id @default(cuid())

    userStatsId String
    userStats   UserStats @relation(fields: [userStatsId], references: [userId], onDelete: Cascade)

    typedText String
    needText  String

    startTestTime BigInt
    endTestTime   BigInt

    testType      TestType
    testValueType TestValueType
    testValue     Int

    testRecord TestRecord[]
}

// Чтобы печатная машинка смогла посмотреть своё время печати на каждый день и средний WPM в тот день
model TypingTimePerDay {
    id          String    @id @default(cuid())
    userStatsId String
    userStats   UserStats @relation(fields: [userStatsId], references: [userId], onDelete: Cascade)

    date       String @unique // YYYY-MM-DD
    timeMillis BigInt
    avgWPM     Float

    @@unique([userStatsId, date])
}

enum TestType {
    TIME
    WORDS
    TEXT
    AI
    CUSTOM
}

enum TestValueType {
    SECONDS
    WORDS
    SENTENCES
}
